#创建数组
1维数组np.array([1,2,3])
2维数组np.array([[i,i+1,i+2] for i in range(3)])
理解为:先从0开始0，0+1，0+2），(1,1+1,1+2)如此类推通过列表推导式生成二维数组

#原生数组创建方式
np.arange(start = 1,stop= 10,step=2,dtype = int)开始数，结束数，步进，数据类型，递增数组方法
np.arange(10)与Python的range基本一致，目的是生成0-9的数字为整数

# 指定元素数量的均匀递增数据
np.linspace(1.,10.,10)生成1到10的float类型数据，第一为是开始数据，第二是结束数，第三只截止数重1开始到10的浮点数

#全0矩阵
np.zeros(shape=(3,4),dtype=float)创建一个为3列4行，0的浮点数float的矩阵

#全1矩阵
np.ones(shape=(3,4),dtype=float)创建一个为3列4行，0的浮点数float的矩阵

# 返回具有与给定数组相同的形状和类型的零数组
通过ONES创建的二位数组进行定数组方式
np.ones_like(全0或全1的矩阵值)

# 返回具有与给定数组相同的形状和类型的新随机数组
np.empty_like(a)

# 对角矩阵（对角数据分布）(获取与创建方法一致)
np.diag([1,2,3])          
效果array([[1, 0, 0],
          [0, 2, 0],
          [0, 0, 3]])
          
 # 获取矩阵对角元素
 np.diag([[1,2,3],   打印结果为1，5，9   
        [4,5,6],
        [7,8,9]])
        
# 获取矩阵偏移对角元素
np.diag([[1,2,3],
        [4,5,6],
        [7,8,9]],1)在最后添加位置数据，代表移动1个位置就是2，6。如此类推

# 幂零矩阵
np.eye(3)(创建一个对角元素的对角矩阵，偏移值默认1，其他填充为0 )


######随机函数创建######
函数	解释
rand(d0,d1,…)	[0,1]均匀分布
randint(low,high,size)	[low,high)整数均匀分布
choice(a,size,replace,p)	指定数组指定概率分布
randn(d0,d1,…)	标准正态分布

#均匀分布
np.random.rand(3,4)随机创建3列4行随机数据(可以设置为4个维，3列，2行执行)
#整数均匀分布
np.random.randint(2,size=(3,4))

#指定数组指定概率分布
umpy.random.choice(a, size=None, replace=True, p=None)
从给定的一维数组中生成随机数
参数： a为一维数组类似数据或整数；size为数组维度；p为数组中的数据出现的概率
a为整数时，对应的一维数组为np.arange(a)
^参数p的长度与参数a的长度需要一致；
^参数p为概率，p里的数据之和应为1
np.random.choice([1,2,3,4],size=(3,4),replace=True,p=[0.1,0.2,0.3,0.4])



