#打开文件函数read_csv
xx=pandas.read_csv("文件路径或如果当前就直接使用文件名称")
#显示数据head()
xx.head()打印显示数据（添加数字就是代表显示前多少行数）
xx.head(3)打印三行数据
aa=xx.head()赋值操作
#tail()显示最后几行数据
#columns显示数据指标，可以理解为字段名称
#shape查看有多少个指标和多少行数据
------------------------------------------------------------------------------------------------------------------------
#获取元素数据方式
#loc[]提取元素位置的数据（索引数据）类似list【0】获取元素的方法或用切片获取的方式获取[1:10]前10条数据loc['数据位置','字段名称']
#xx['abc']获取数据第一行数据，类似获取dict方式类似（获取两个数据的方式需要放到一个List里面填入参数）xx[名称]
#columns.tolist()把当前的列明做成一个List模式(把字段名称作为list存放，可以用来做迭代遍历)
#endswith("xx")或者通过tolist获取的元素名称，通过endswith("判断最后的文字内容是否匹配")如匹配则提取出来
                前提条件是必须进行遍历后才能处理，否则报错。
1通过append()的方式组成List
2通过list查找的方式获取List索引的数据。类似提取字典方式匹配key值获取内容
------------------------------------------------------------------------------------------------------------------------
#计算方式（注意 必须维度一致数据必须一致，否则会报错）
除法操作=xx.["列明"]/1000（/除法）：处理过程会对此列所有数据进行除法
乘法操作=xx['1']*xx['2']两个相成得出数据
------------------------------------------------------------------------------------------------------------------------
#获取最大值
.max()
.min()
------------------------------------------------------------------------------------------------------------------------
#排序函数
inplace:(xx['agc],inplace=True) （获取新的数据，false=代表作为新的数据）
ascending:(xx['agc],inplace=True,ascending=False)(降序操作，否则升序)
------------------------------------------------------------------------------------------------------------------------
#判读函数
#判读空值需先加载数据，如df['Age']获取整列数据后才能进行空值判断，同时不能使用赋值方式，直接使用pandas.isnull来查询否则报错
pd.isnull('字段名称')判断缺失值
***********************************************************************************************************
调用方法详解,所有计算逻辑都需要先把数据内的数据先提取出来，并赋值给一个元素，通过元素来处理相关数据
例子：age=df["Age"]先通过age元素获取数据表格内的所有数据
notnull_name=pd.isnull(age)通过pd.isnull()函数把age内的数据进行判断获取为空的数据
total_null=age[notnull_name]通过使用age数据匹配已经查找到的空元素，进行匹配获取相关数据
************************************************************************************************************
ysjpjz=df["Age"][notnull_name==False]首先获取到数据集中为age的数据，然后在后面添加查找取出控制为TURE的数据，并进行赋值
pjz=sum(ysjpjz)/len(ysjpjz)可以通过获得数据集进行计算
**********************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------
mean()获取平均值
计算数据需要先读取的数据整行数据，同时需要就赋值操作
aa=df["Age"]
pingjjg=jiage.mean()
------------------------------------------------------------------------------------------------------------------------
pivot_table
#pinjz=df.pivot_table(index="Pclass",values=["Age"])不添加的aggfunc就默认为平均值mean()
#df.pivot_table(index="Embarked",values=["Fare","Survived"],aggfunc=np.sum)#计算多个维度数据合计数据
复杂常规计算方式
changcangdengji=[1,2,3]
fenlieshuju={}
for i in changcangdengji:
    dejifenlei= df[df["Pclass"]==i]
    jiage=df["Fare"]
    pingjjg=jiage.mean()
    fenlieshuju[i]=pingjjg
print(fenlieshuju)
pivot_table(index='字段（以什么为基准）',values='字段（与基准有什么关系）'，aggfunc=np.mean（）)
pivot_table(index='字段（以什么为基准）',values='字段（与基准有什么关系）'，aggfunc=np.sum（）)
------------------------------------------------------------------------------------------------------------------------
dropna()丢掉缺失值的方法
df.dropna(axis=1)把包含缺失值的整列删除
df.dropna(axis=0,subset=['Age','Sex'])如果发现subset内存在缺失值就把数据直接删除掉。删除对应的行
------------------------------------------------------------------------------------------------------------------------
#sort_values(排序操作）
    aa=df.sort_values("Age",ascending=False)（默认降序操作。如果为Ture为升序）
#reset_index(重置序列编号)
    aa.reset_index(drop=True)对升序后的序列index编号，重0开始到结束
------------------------------------------------------------------------------------------------------------------------
apply用于调用函数def 内方法
def totalnull(listdata):
    totaldata=pd.isnull(listdata)
    nulldata=listdata[totaldata]
    return len(nulldata)
cc=df.apply(totalnull)
------------------------------------------------------------------------------------------------------------------------
Series()核心结构
DataFrame()集成上面Series　结构
from pandas import Series
#先通过aa=Pd.read_csv("文件名称")打开文件
#打开文件后通过获取值的方式例如bb=aa["字段名称"]
film_names=bb.values(获取数据方式)存放刚才获取的数据
re_scores=series_rt.values(获取数据方式)存放刚才获取的数据
Series(re_scoures,index=film_names)通过获取到的数据组合成一个新的索引值，用名字当做一个索引
#查询的方法通过两个List来获取值
[["aa","bb"]]

####排序功能
seriesdata.sort_index(ascending = False, inpalce = False)(对索引值进行排序)
seriesdata.sort_values(ascending = False, inpalce = False)（对值进行排序）
类似处理方式
####相加方式
add()
index 可以理解为所以是不参与相加操作的。
###########
------------------------------------------------------------------------------------------------------------------------
DataFrame()数据格式可以理解为一个字典格式的数据模式
dtm={"FILM":name,"RottenTomatoes":pf}
dfm=pd.DataFrame(dtm)
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------



