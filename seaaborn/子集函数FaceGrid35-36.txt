FaceGrid函数：使用较多子集的时候使用的函数
------------------------------------------------------------------------------------------------------
%matplotlib inline
import numpy as np
import pandas as pd
import seaborn as sns
from scipy import stats
import matplotlib as mpl
import matplotlib.pyplot as plt
sns.set(style="ticks")
np.random.seed(sum(map(ord, "axis_grids")))
-----------------------------------------------------------------------------------------------------
条形图
tips=sns.load_dataset("tips")
g=sns.FaceGrid(tips,col="time")先创建好数据框架
g.map(plt.hist,"tip")#plt.hist条形图方式

------------------------------------------------------------------------------------------------------
g=sns.FaceGrid(tips,col="sex",hue="somker")#hue代表类别信息名称
g.map(plt.scatter,"total_bill","tip",appha=.7)直接制定数据字段及透明程度
g.add_legend()悬浮类别信息

------------------------------------------------------------------------------------------------------
g = sns.FacetGrid(tips, row="smoker", col="time", margin_titles=True)
g.map(sns.regplot, "size", "total_bill", color=".1", fit_reg=False, x_jitter=.1);
margin_titles=True是否显示标题名称
fit_reg=False回归线
x_jitterr=.1#浮动值
------------------------------------------------------------------------------------------------------
布局相
g = sns.FacetGrid(tips, col="day", size=4, aspect=.5)
g.map(sns.barplot, "sex", "total_bill");
------------------------------------------------------------------------------------------------------
from pandas import Categorical
ordered_days = tips.day.value_counts().index#获取所有日期的值

#数据制定数据的顺序的方式，先设定顺序Categorical处理一个新的顺，在通过
ordered_days = Categorical(['Thur', 'Fri', 'Sat', 'Sun'])#类别Categorical

g = sns.FacetGrid(tips, row="day", row_order=ordered_days,size=1.7, aspect=4,)
row_order=自定义设定顺序

g.map(sns.boxplot, "total_bill");
------------------------------------------------------------------------------------------------------
#设定颜色方式
pal = dict(Lunch="seagreen", Dinner="gray")
#设定调色板palette
g = sns.FacetGrid(tips, hue="time", palette=pal, size=5)
#设定图形参数
g.map(plt.scatter, "total_bill", "tip", s=50, alpha=.7, linewidth=.5, edgecolor="white")
#标签
g.add_legend();

------------------------------------------------------------------------------------------------------
#hue_kws={"marker":["^","v"]}设定图形的形状
g = sns.FacetGrid(tips, hue="sex", palette="Set1", size=5, hue_kws={"marker": ["^", "v"]})

#edgecolor="white"图形报表颜色控制
g.map(plt.scatter, "total_bill", "tip", s=100, linewidth=.5, edgecolor="white")
g.add_legend();

------------------------------------------------------------------------------------------------------
with sns.axes_style("white"):
    g = sns.FacetGrid(tips, row="sex", col="smoker", margin_titles=True, size=2.5)
g.map(plt.scatter, "total_bill", "tip", color="#334488", edgecolor="white", lw=.5);

#指定轴的名称方式
g.set_axis_labels("Total bill (US Dollars)", "Tip");

#xticks设置X轴的取值方位取值范围【10，30，50】在图形底部
#yticks设置Y轴的取值方位取值范围[2, 6, 10]在图形底部
g.set(xticks=[10, 30, 50], yticks=[2, 6, 10]);

#wspace子图之间的宽间隔
#hspace子图自建高度间隔
g.fig.subplots_adjust(wspace=.02, hspace=.02);
#上下左右的偏移程度
#g.fig.subplots_adjust(left  = 0.125,right = 0.5,bottom = 0.1,top = 0.9, wspace=.02, hspace=.02)

------------------------------------------------------------------------------------------------------
案例：
iris = sns.load_dataset("iris")
g = sns.PairGrid(iris)
g.map(plt.scatter);
对角线画图方式
g = sns.PairGrid(iris)
g.map_diag(plt.hist)
g.map_offdiag(plt.scatter);
物种类别拆分
g = sns.PairGrid(iris, hue="species")
g.map_diag(plt.hist)
g.map_offdiag(plt.scatter)
g.add_legend();
特征选取方式
#vars=特征的名字理解为字典名称
g = sns.PairGrid(iris, vars=["sepal_length", "sepal_width"], hue="species")
g.map(plt.scatter);
调色板处理方式
#调色板渐变方式palette="GnBu_d"
g = sns.PairGrid(tips, hue="size", palette="GnBu_d")
#颜色布局 edgecolor="white"
g.map(plt.scatter, s=50, edgecolor="white")
g.add_legend();
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

